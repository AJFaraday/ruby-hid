module RubyHid

  class Button

    #
    # List of button types, with names
    #
    BUTTONS = {
      288 => :btn_1,
      289 => :btn_2,
      290 => :btn_3,
      291 => :btn_4,
      292 => :l1,
      293 => :r1,
      294 => :l2,
      295 => :r2,
      296 => :select,
      297 => :start,
      298 => :l_stick,
      299 => :r_stick
    }

    @@buttons = []

    # events will be an array of lambdas
    attr_accessor :name, :code, :events

    #
    # Create a button object to observe all known button types
    #
    # I currently don't know if this is wise or not, at a later date
    # I may revert this to the find_or_create activity in
    # make_from_code via find
    #
    def self.build
      BUTTONS.each { |code, name| self.new(code, name) }
    end

    #
    # Quick summary of the button
    #
    def to_s
      "Button: #{code} - #{name}"
    end

    #
    # Initialize a button
    #
    # called in RubyHid::Pad.init_mappings
    #
    # Arguments:
    #
    # * code - Integer, the evnt code generated by this button (704-723)
    # * name - Symbol, the name of the button, for referncing via the Pad object
    #
    def initialize(code, name)
      @code = code
      @name = name
      @events = []
      @@buttons << self
    end

    #
    # Create a button object from a known code.
    #
    # Arguments:
    #
    # * code - Integer, event code to retrieve button by.
    #
    def self.make_from_code(code)
      name = BUTTONS[code]
      if name
        self.new(code, name)
      else
        nil
      end
    end

    #
    # Create a button from a known name
    #
    # Arguments:
    #
    # * name - symbol, a known button name
    #
    def self.make_from_name(name)
      code = BUTTONS.detect{|code, btn_name| btn_name == name}
      if code
        self.new(code, name)
      else
        nil
      end
    end

    #
    # Find a button by its event code. Used by trigger_key
    # to find a button when one is pushed.
    #
    # Arguments:
    #
    # * code - Integer, event code to retrieve button by.
    #
    def self.find(code)
      btn = @@buttons.detect { |b| b.code == code }
      if btn.nil?
        puts 'code not found: ' + code
        self.make_from_code(code)
      end
      btn
    end

    #
    # Find a button by its event code. Used by trigger_key
    # to find a button when one is pushed.
    #
    # Arguments:
    #
    # * name - Symbol, a known button name (from BUTTONS)
    #
    def self.find_by_name(name)
      btn = @@buttons.detect { |b| b.name == name }
      if btn.nil?
        self.make_from_name(name)
      end
      btn
    end

    #
    # Add a process to be triggered when this button is pressed.
    #
    # Arguments:
    #
    # * proc - Proc, ruby method to be called, without arguments on button press.
    #
    def add_event(proc)
      @events << proc
    end

    #
    # Trigger every proc in the @events array.
    #
    def trigger_events(value=nil)
      @events.each do |event|
        event.call(value)
      end
    end

    #
    # Find a button and run all it's events.
    #
    # Used by RubyHid::Device when button is pushed.
    #
    # Arguments:
    #
    # * code - Integer, event code to retrieve button by.
    #
    def self.trigger_key(code, value=nil)
      btn = self.find(code)
      btn.trigger_events(value)
    rescue => er
      puts "Error in button push events: #{er.message}"
    end

  end
end